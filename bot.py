import logging
import random
import openai
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from deep_translator import GoogleTranslator
import nest_asyncio

nest_asyncio.apply()


# üîπ –í—Å—Ç–∞–≤—Ç–µ –≤–∞—à—ñ API-—Ç–æ–∫–µ–Ω–∏
TELEGRAM_TOKEN = "8155784197:AAGzjgSTvjImosbbWVSxUgI9HcLRH3qLN0A"
OPENAI_API_KEY = "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"

# üîπ –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# üîπ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ChatGPT API
openai.api_key = OPENAI_API_KEY

# üìå –ë–∞–∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (100 —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö)
motivation = [f"–ú–æ—Ç–∏–≤–∞—Ü—ñ—è {i}: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π Python –Ω–∞ –º–∞–∫—Å–∏–º—É–º! üêç" for i in range(1, 101)]
jokes = [f"–ñ–∞—Ä—Ç {i}: –ü–∞—Ä—Å–µ—Ä –ø—Ä–∞—Ü—é—î, –∞–ª–µ —á–∏ –ø—Ä–∞—Ü—é—î –≤—ñ–Ω –¥–æ–±—Ä–µ? ü§î" for i in range(1, 101)]
support = [f"–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ {i}: –¢–∏ –≤–ø–æ—Ä–∞—î—à—Å—è, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ `import pandas` –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤! üí™" for i in range(1, 101)]
prediction = [f"–ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è {i}: –°—å–æ–≥–æ–¥–Ω—ñ —Ç–æ–±—ñ –¥–æ–≤–µ–¥–µ—Ç—å—Å—è –ø–µ—Ä–µ—Ä–æ–±–ª—è—Ç–∏ –∑–≤—ñ—Ç 3 —Ä–∞–∑–∏! üìä" for i in range(1, 101)]

# üìå –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–∞–Ω–∞–ª—ñ—Ç–∏–∫. –û—Å—å —â–æ —è –≤–º—ñ—é:\n"
        "üü¢ /motivation ‚Äì –ú–æ—Ç–∏–≤–∞—Ü—ñ—è\n"
        "üü¢ /joke ‚Äì –ñ–∞—Ä—Ç\n"
        "üü¢ /support ‚Äì –ü—ñ–¥—Ç—Ä–∏–º–∫–∞\n"
        "üü¢ /prediction ‚Äì –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è\n"
        "üü¢ –ù–∞–ø–∏—à–∏ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è —Å–ø—Ä–æ–±—É—é –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏! (ChatGPT ü§ñ)"
    )

# üìå –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
async def get_response(update: Update, context: CallbackContext) -> None:
    command = update.message.text[1:]  # –í–∏–¥–∞–ª—è—î–º–æ "/"
    responses = {
        "motivation": motivation,
        "joke": jokes,
        "support": support,
        "prediction": prediction
    }
    if command in responses:
        await update.message.reply_text(random.choice(responses[command]))

# üìå –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ ChatGPT API
async def chatgpt_response(update: Update, context: CallbackContext) -> None:
    user_text = update.message.text
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": user_text}]
        )
        chatgpt_reply = response["choices"][0]["message"]["content"]
        await update.message.reply_text(chatgpt_reply)
    except Exception as e:
        await update.message.reply_text("‚ö† –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ ChatGPT.")

# üìå –ü–µ—Ä–µ–∫–ª–∞–¥ —Ç–µ–∫—Å—Ç—É
async def translate_text(update: Update, context: CallbackContext) -> None:
    user_text = update.message.text.replace("/translate ", "")
    translated_text = GoogleTranslator(source="auto", target="en").translate(user_text)
    await update.message.reply_text(f"üî† –ü–µ—Ä–µ–∫–ª–∞–¥: {translated_text}")

# üìå –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler(["motivation", "joke", "support", "prediction"], get_response))
    app.add_handler(CommandHandler("translate", translate_text))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chatgpt_response))  # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É ChatGPT

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == "__main__":
    main()
